// *************************************
//
//   Helpers
//   -> Functions, Mixins, Extends, Animations
//
// *************************************

// -------------------------------------
//   Functions
// -------------------------------------

// ----- Em ----- //
// -> Converts pixel value to ems
//
// $target - the target pixel size
// $context - the context font-size

@function em($target, $context: $b-fontSize) {
  @if $target == 0 {
    @return 0;
  }
  @else {
    @return $target / $context * 1em;
  }
}

// -------------------------------------
//   Mixins
// -------------------------------------

// ----- Action ----- //
// -> Sets clickable element defaults

@mixin action {
  border: 0;
  cursor: pointer;
  display: inline-block;
  text-align: center;
  text-decoration: none;
  transition: $b-transition;
  user-select: none;
  white-space: nowrap;
}

// ----- Clearix ----- //
// -> Contain floats

@mixin clearfix {
  &::after {
    clear: both;
    content: "";
    display: table;
  }
}

// ----- List Reset ----- //
// -> Removes default list styles

@mixin list-reset {
  list-style-type: none;
  margin: 0;
  padding: 0;
}

// ----- Fontless ----- //
// -> Style fallback text

@mixin fontless {
  @if is-superselector("html", &) {
    &:not(.wf-active) {
      @content;
    }
  }
  @else {
    html:not(.wf-active) & {
      @content;
    }
  }
}

// ----- Respond-to ----- //
// -> Generate a media query
//
// $value - the breakpoint size
// $query - the type of query ('min-width', 'max-width')
// $media - the media type ('screen', 'print', etc.)
// @content - the generated content within the mixin

@mixin respond-to($value, $query: min-width, $media: screen) {
  @media #{$media} and ($query: $value) {
    @content;
  }
}

// ----- Respond-within ----- //
// -> Generates a media query within a range
//
// $min - the initial breakpoint size
// $max - the larger breakpoint size
// $media - the media type ('screen', 'print', etc.)
// @content - the generated content within the mixin

@mixin respond-within($min, $max, $media: screen) {
  @media #{$media} and (min-width: $min) and (max-width: $max) {
    @content;
  }
}

// ----- Respond-to ----- //
// -> Generate a media query
//
// $value - the breakpoint size
// @content - the generated content within the mixin

@mixin respond-until($value, $media: screen) {
  @media #{$media} and (max-width: $value - 1px) {
    @content;
  }
}

// ----- State ----- //
// -> Combines state-related pseudo-classes
//
// $class - an optional state class ('is-active')

@mixin state($class: false) {
  @if $class {
    &:active, &:focus, &:hover, &.#{$class} {
      @content;
    }
  }
  @else {
    &:active, &:focus, &:hover {
      @content;
    }
  }
}

// -------------------------------------
//   Extends
// -------------------------------------

// ----- List Reset ----- //

.lr {
  @include list-reset;
}

// ----- Semantic Hide ----- //

.srt {
  border: 0;
  clip: rect(0 0 0 0);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
}

// -------------------------------------
//   Animations
// -------------------------------------

// ...
