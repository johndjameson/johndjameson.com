// *************************************
//
//   Helpers
//   -> Functions, Mixins, Extends, Animations
//
// *************************************

// -------------------------------------
//   Functions
// -------------------------------------

// ----- Em ----- //
// -> Converts pixel value to ems
//
// $target - the target pixel size
// $context - the context font-size

@function em( $target, $context: $b-fontSize )
  @if ( $target == 0 )
    @return 0
  @else
    @return ( $target / $context ) * 1em

// ----- Strip Units ----- //
// -> Removes the unit type from values
//
// $value - the initial number

@function strip-units( $value )
  @return $value / ( $value * 0 + 1)

// ----- Rem ----- //
// -> Converts pixel value to rems
//
// $target - the target pixel size
// $context - the context font-size

@function rem( $target, $context: $b-fontSize )
  @if ( $target == 0 )
    @return 0
  @else
    @return ( $target / $context ) * 1rem

// -------------------------------------
//   Mixins
// -------------------------------------

// ----- Action ----- //
// -> Sets clickable element defaults

=action
  border: 0
  cursor: pointer
  display: inline-block
  text-align: center
  text-decoration: none
  transition: $b-transition
  user-select: none
  white-space: nowrap

// ----- Font Size ----- //
// -> Calculates responsive font sizes in rems
//
// $sizes - map of desired font sizes in pixels (b, s, m, l)

=font-size( $sizes )
  @if $sizes == 's'
    +font-size( ( b: $b-fontSize-s, m: $b-fontSize-s-b ) )
  @else
    @each $name, $size in $sizes
      @if map-get( $sizes, $name )
        $sizes: map-merge( $sizes, ( $name: ( $size / $b-fontSize ) * 1rem ) )

    font-size: map-get( $sizes, 'b' )

    @each $name, $width in $g-breakpoints
      @media screen and ( min-width: #{ $width } )
        font-size: map-get( $sizes, $name )

// ----- Respond-to ----- //
// -> Generates a media query
//
// $val - the breakpoint size
// $query - the type of query ('min-width', 'max-width')
// $media - the media type ('screen', 'print', etc.)
// @content - the generated content within the mixin

=respond-to( $val, $query: min-width, $media: screen )
  @media #{ $media } and ( $query: $val )
    @content

// ----- Respond-within ----- //
// -> Generates a media query within a range
//
// $min - the initial breakpoint size
// $max - the larger breakpoint size
// $media - the media type ('screen', 'print', etc.)
// @content - the generated content within the mixin

=respond-within( $min, $max, $media: screen )
  @media #{ $media } and ( min-width: $min ) and ( max-width: $max )
    @content

// ----- State ----- //
// -> Combines state-related pseudo-classes
//
// $class - an optional state class ('is-active')

=state( $class: false )

  @if $class
    &:active, &:focus, &:hover, &.#{ $class }
      @content

  @else
    &:active, &:focus, &:hover
      @content

// -------------------------------------
//   Extends
// -------------------------------------

// ----- List Reset ----- //

.lr
  list-style-type: none
  margin: 0
  padding: 0

// ----- Semantic Hide ----- //

.srt
  border: 0
  clip: rect( 0 0 0 0 )
  height: 1px
  margin: -1px
  overflow: hidden
  padding: 0
  position: absolute
  width: 1px

// -------------------------------------
//   Animations
// -------------------------------------

// ...
