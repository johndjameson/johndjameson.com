// *************************************
//
//   Helpers
//   -> Functions, Mixins, Extends, Animations
//
// *************************************

// -------------------------------------
//   Functions
// -------------------------------------

// ----- Font Face ----- //
// -> https://github.com/thoughtbot/bourbon/edit/master/app/assets/stylesheets/css3/_font-face.scss#
//
// $family - the font-family
// $path - the font path
// $weight - the font-weight
// $style - the font-style
// $asset-pipeline - use the Rails asset pipeline (boolean)

=font-face( $family, $path, $weight: normal, $style: normal, $asset-pipeline: true )
  @font-face
    font-family: $family
    font-style: $style
    font-weight: $weight
    @if $asset-pipeline == true
      src: font-url( '#{$path}.eot' )
      src: font-url( '#{$path}.eot?#iefix' ) format( 'embedded-opentype' ), font-url( '#{ $path }.woff' ) format( 'woff' ), font-url( '#{ $path }.ttf' ) format( 'truetype' ), font-url( '#{ $path }.svg##{ $family }' ) format( 'svg' )
    @else
      src: url( '#{$path}.eot' )
      src: url( '#{$path}.eot?#iefix' ) format( 'embedded-opentype' ), url( '#{ $path }.woff' ) format( 'woff' ), url( '#{ $path }.ttf' ) format( 'truetype' ), url( '#{ $path }.svg##{ $family }' ) format( 'svg' )

// ----- Em ----- //
// -> Converts pixel value to ems
//
// $target - the target pixel size
// $context - the context font-size

@function em( $target, $context: $b-fontSize )
  @if ( $target == 0 )
    @return 0
  @else
    @return ( $target / $context ) * 1em


// ----- Rem ----- //
// -> Converts pixel value to rems
//
// $target - the target pixel size
// $context - the context font-size

@function rem( $target, $context: $b-fontSize )
  @if ( $target == 0 )
    @return 0
  @else
    @return ( $target / $context ) * 1rem

// -------------------------------------
//   Mixins
// -------------------------------------

// ----- Font Size ----- //
// -> Calculates responsive font sizes in rems
//
// $sizes - map of desired font sizes in pixels (b, s, m, l)

=font-size( $sizes )
  @each $name, $size in $sizes
    @if map-get( $sizes, $name )
      $sizes: map-merge( $sizes, ( $name: ( $size / $b-fontSize ) * 1rem ) )

  font-size: map-get( $sizes, 'b' )

  @each $name, $width in $g-breakpoints
    @media screen and ( min-width: #{ $width } )
      font-size: map-get( $sizes, $name )

// ----- Font Size - Small ----- //
// -> Calculates a small responsive font size in rems

=font-size-s
  +font-size( ( b: $b-fontSize-s, m: $b-fontSize-s--m ) )

// ----- Respond-to ----- //
// -> Generates a media query
//
// $val - the breakpoint size
// $query - the type of query ('min-width', 'max-width')
// $media - the media type ('screen', 'print', etc.)
// @content - the generated content within the mixin

=respond-to( $val, $query: min-width, $media: screen )
  @media #{ $media } and ( $query: $val )
    @content

// ----- State ----- //
// -> Combines state-related pseudo-classes
//
// $class - an optional state class ('is-active')

=state( $class: false )

  @if $class
    &:active, &:focus, &:hover, &.#{ $class }
      @content

  @else
    &:active, &:focus, &:hover
      @content

// -------------------------------------
//   Extends
// -------------------------------------

// ----- Clearfix ----- //

.group::after
  clear: both
  content: ''
  display: table

// ----- Ellipsis ----- //

.ellipsis
  overflow: hidden
  text-overflow: ellipsis
  white-space: nowrap

// ----- Image Replacement ----- //

.ir
  background-color: transparent
  border: 0
  overflow: hidden

  &::before
    content: ''
    display: block
    height: 150%
    width: 0

// ----- List Reset ----- //

.lr
  list-style-type: none
  margin: 0
  padding: 0

// ----- Semantic Hide ----- //

.srt
  border: 0
  clip: rect( 0 0 0 0 )
  height: 1px
  margin: -1px
  overflow: hidden
  padding: 0
  position: absolute
  width: 1px

// -------------------------------------
//   Animations
// -------------------------------------

// ...
